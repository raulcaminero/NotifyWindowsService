//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NotifyAuthenticationHandler.AdmBalanceoILP {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SolicitudDetail", Namespace="http://schemas.datacontract.org/2004/07/obILP_CL.Model")]
    [System.SerializableAttribute()]
    public partial class SolicitudDetail : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AcuerdoServicioField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ColaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long DocumentHandleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EstadoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> EstadoAsignacionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EtapaDescripcionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> FechaConclusionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime FechaIngresoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime FechaVencimientoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PrioritariaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SolicitudIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TipoDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TipoSolicitudField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsuarioField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AcuerdoServicio {
            get {
                return this.AcuerdoServicioField;
            }
            set {
                if ((this.AcuerdoServicioField.Equals(value) != true)) {
                    this.AcuerdoServicioField = value;
                    this.RaisePropertyChanged("AcuerdoServicio");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Cola {
            get {
                return this.ColaField;
            }
            set {
                if ((object.ReferenceEquals(this.ColaField, value) != true)) {
                    this.ColaField = value;
                    this.RaisePropertyChanged("Cola");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long DocumentHandle {
            get {
                return this.DocumentHandleField;
            }
            set {
                if ((this.DocumentHandleField.Equals(value) != true)) {
                    this.DocumentHandleField = value;
                    this.RaisePropertyChanged("DocumentHandle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Estado {
            get {
                return this.EstadoField;
            }
            set {
                if ((this.EstadoField.Equals(value) != true)) {
                    this.EstadoField = value;
                    this.RaisePropertyChanged("Estado");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> EstadoAsignacion {
            get {
                return this.EstadoAsignacionField;
            }
            set {
                if ((this.EstadoAsignacionField.Equals(value) != true)) {
                    this.EstadoAsignacionField = value;
                    this.RaisePropertyChanged("EstadoAsignacion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EtapaDescripcion {
            get {
                return this.EtapaDescripcionField;
            }
            set {
                if ((object.ReferenceEquals(this.EtapaDescripcionField, value) != true)) {
                    this.EtapaDescripcionField = value;
                    this.RaisePropertyChanged("EtapaDescripcion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> FechaConclusion {
            get {
                return this.FechaConclusionField;
            }
            set {
                if ((this.FechaConclusionField.Equals(value) != true)) {
                    this.FechaConclusionField = value;
                    this.RaisePropertyChanged("FechaConclusion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FechaIngreso {
            get {
                return this.FechaIngresoField;
            }
            set {
                if ((this.FechaIngresoField.Equals(value) != true)) {
                    this.FechaIngresoField = value;
                    this.RaisePropertyChanged("FechaIngreso");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FechaVencimiento {
            get {
                return this.FechaVencimientoField;
            }
            set {
                if ((this.FechaVencimientoField.Equals(value) != true)) {
                    this.FechaVencimientoField = value;
                    this.RaisePropertyChanged("FechaVencimiento");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Prioritaria {
            get {
                return this.PrioritariaField;
            }
            set {
                if ((this.PrioritariaField.Equals(value) != true)) {
                    this.PrioritariaField = value;
                    this.RaisePropertyChanged("Prioritaria");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SolicitudId {
            get {
                return this.SolicitudIdField;
            }
            set {
                if ((object.ReferenceEquals(this.SolicitudIdField, value) != true)) {
                    this.SolicitudIdField = value;
                    this.RaisePropertyChanged("SolicitudId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TipoDescription {
            get {
                return this.TipoDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.TipoDescriptionField, value) != true)) {
                    this.TipoDescriptionField = value;
                    this.RaisePropertyChanged("TipoDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TipoSolicitud {
            get {
                return this.TipoSolicitudField;
            }
            set {
                if ((this.TipoSolicitudField.Equals(value) != true)) {
                    this.TipoSolicitudField = value;
                    this.RaisePropertyChanged("TipoSolicitud");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Usuario {
            get {
                return this.UsuarioField;
            }
            set {
                if ((object.ReferenceEquals(this.UsuarioField, value) != true)) {
                    this.UsuarioField = value;
                    this.RaisePropertyChanged("Usuario");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AdmBalanceoILP.IOBILP")]
    public interface IOBILP {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOBILP/RegistrarSolicitud", ReplyAction="http://tempuri.org/IOBILP/RegistrarSolicitudResponse")]
        string RegistrarSolicitud(string solicitudID, string tipoSolicitud, long DocumentHandle, string etapa);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOBILP/RegistrarSolicitud", ReplyAction="http://tempuri.org/IOBILP/RegistrarSolicitudResponse")]
        System.Threading.Tasks.Task<string> RegistrarSolicitudAsync(string solicitudID, string tipoSolicitud, long DocumentHandle, string etapa);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOBILP/AsignarSolicitud", ReplyAction="http://tempuri.org/IOBILP/AsignarSolicitudResponse")]
        string AsignarSolicitud(string usuario, string etapa, string cola);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOBILP/AsignarSolicitud", ReplyAction="http://tempuri.org/IOBILP/AsignarSolicitudResponse")]
        System.Threading.Tasks.Task<string> AsignarSolicitudAsync(string usuario, string etapa, string cola);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOBILP/LiberarSolicitud", ReplyAction="http://tempuri.org/IOBILP/LiberarSolicitudResponse")]
        string LiberarSolicitud(string usuario, string solicitudID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOBILP/LiberarSolicitud", ReplyAction="http://tempuri.org/IOBILP/LiberarSolicitudResponse")]
        System.Threading.Tasks.Task<string> LiberarSolicitudAsync(string usuario, string solicitudID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOBILP/NotificarMovimientoSolicitud", ReplyAction="http://tempuri.org/IOBILP/NotificarMovimientoSolicitudResponse")]
        string NotificarMovimientoSolicitud(string solicitudID, string nuevaEtapa, string nuevaCola);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOBILP/NotificarMovimientoSolicitud", ReplyAction="http://tempuri.org/IOBILP/NotificarMovimientoSolicitudResponse")]
        System.Threading.Tasks.Task<string> NotificarMovimientoSolicitudAsync(string solicitudID, string nuevaEtapa, string nuevaCola);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOBILP/CerrarSolicitud", ReplyAction="http://tempuri.org/IOBILP/CerrarSolicitudResponse")]
        string CerrarSolicitud(string usuario, string solicitudID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOBILP/CerrarSolicitud", ReplyAction="http://tempuri.org/IOBILP/CerrarSolicitudResponse")]
        System.Threading.Tasks.Task<string> CerrarSolicitudAsync(string usuario, string solicitudID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOBILP/LiberarSolicitudEnOnBase", ReplyAction="http://tempuri.org/IOBILP/LiberarSolicitudEnOnBaseResponse")]
        string LiberarSolicitudEnOnBase(string solicitudID, string etapa, string usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOBILP/LiberarSolicitudEnOnBase", ReplyAction="http://tempuri.org/IOBILP/LiberarSolicitudEnOnBaseResponse")]
        System.Threading.Tasks.Task<string> LiberarSolicitudEnOnBaseAsync(string solicitudID, string etapa, string usuario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOBILP/AsignacionSolicitudPorSolicitud", ReplyAction="http://tempuri.org/IOBILP/AsignacionSolicitudPorSolicitudResponse")]
        string AsignacionSolicitudPorSolicitud(string solicitudID, string usuario, string etapa, string cola);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOBILP/AsignacionSolicitudPorSolicitud", ReplyAction="http://tempuri.org/IOBILP/AsignacionSolicitudPorSolicitudResponse")]
        System.Threading.Tasks.Task<string> AsignacionSolicitudPorSolicitudAsync(string solicitudID, string usuario, string etapa, string cola);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOBILP/ReAsignarSolicitudEnOnBase", ReplyAction="http://tempuri.org/IOBILP/ReAsignarSolicitudEnOnBaseResponse")]
        string ReAsignarSolicitudEnOnBase(string solicitudID, string usuario, string etapa, string cola);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOBILP/ReAsignarSolicitudEnOnBase", ReplyAction="http://tempuri.org/IOBILP/ReAsignarSolicitudEnOnBaseResponse")]
        System.Threading.Tasks.Task<string> ReAsignarSolicitudEnOnBaseAsync(string solicitudID, string usuario, string etapa, string cola);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOBILP/GetSolicitudes", ReplyAction="http://tempuri.org/IOBILP/GetSolicitudesResponse")]
        System.Collections.Generic.List<NotifyAuthenticationHandler.AdmBalanceoILP.SolicitudDetail> GetSolicitudes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOBILP/GetSolicitudes", ReplyAction="http://tempuri.org/IOBILP/GetSolicitudesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<NotifyAuthenticationHandler.AdmBalanceoILP.SolicitudDetail>> GetSolicitudesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOBILPChannel : NotifyAuthenticationHandler.AdmBalanceoILP.IOBILP, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OBILPClient : System.ServiceModel.ClientBase<NotifyAuthenticationHandler.AdmBalanceoILP.IOBILP>, NotifyAuthenticationHandler.AdmBalanceoILP.IOBILP {
        
        public OBILPClient() {
        }
        
        public OBILPClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OBILPClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OBILPClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OBILPClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string RegistrarSolicitud(string solicitudID, string tipoSolicitud, long DocumentHandle, string etapa) {
            return base.Channel.RegistrarSolicitud(solicitudID, tipoSolicitud, DocumentHandle, etapa);
        }
        
        public System.Threading.Tasks.Task<string> RegistrarSolicitudAsync(string solicitudID, string tipoSolicitud, long DocumentHandle, string etapa) {
            return base.Channel.RegistrarSolicitudAsync(solicitudID, tipoSolicitud, DocumentHandle, etapa);
        }
        
        public string AsignarSolicitud(string usuario, string etapa, string cola) {
            return base.Channel.AsignarSolicitud(usuario, etapa, cola);
        }
        
        public System.Threading.Tasks.Task<string> AsignarSolicitudAsync(string usuario, string etapa, string cola) {
            return base.Channel.AsignarSolicitudAsync(usuario, etapa, cola);
        }
        
        public string LiberarSolicitud(string usuario, string solicitudID) {
            return base.Channel.LiberarSolicitud(usuario, solicitudID);
        }
        
        public System.Threading.Tasks.Task<string> LiberarSolicitudAsync(string usuario, string solicitudID) {
            return base.Channel.LiberarSolicitudAsync(usuario, solicitudID);
        }
        
        public string NotificarMovimientoSolicitud(string solicitudID, string nuevaEtapa, string nuevaCola) {
            return base.Channel.NotificarMovimientoSolicitud(solicitudID, nuevaEtapa, nuevaCola);
        }
        
        public System.Threading.Tasks.Task<string> NotificarMovimientoSolicitudAsync(string solicitudID, string nuevaEtapa, string nuevaCola) {
            return base.Channel.NotificarMovimientoSolicitudAsync(solicitudID, nuevaEtapa, nuevaCola);
        }
        
        public string CerrarSolicitud(string usuario, string solicitudID) {
            return base.Channel.CerrarSolicitud(usuario, solicitudID);
        }
        
        public System.Threading.Tasks.Task<string> CerrarSolicitudAsync(string usuario, string solicitudID) {
            return base.Channel.CerrarSolicitudAsync(usuario, solicitudID);
        }
        
        public string LiberarSolicitudEnOnBase(string solicitudID, string etapa, string usuario) {
            return base.Channel.LiberarSolicitudEnOnBase(solicitudID, etapa, usuario);
        }
        
        public System.Threading.Tasks.Task<string> LiberarSolicitudEnOnBaseAsync(string solicitudID, string etapa, string usuario) {
            return base.Channel.LiberarSolicitudEnOnBaseAsync(solicitudID, etapa, usuario);
        }
        
        public string AsignacionSolicitudPorSolicitud(string solicitudID, string usuario, string etapa, string cola) {
            return base.Channel.AsignacionSolicitudPorSolicitud(solicitudID, usuario, etapa, cola);
        }
        
        public System.Threading.Tasks.Task<string> AsignacionSolicitudPorSolicitudAsync(string solicitudID, string usuario, string etapa, string cola) {
            return base.Channel.AsignacionSolicitudPorSolicitudAsync(solicitudID, usuario, etapa, cola);
        }
        
        public string ReAsignarSolicitudEnOnBase(string solicitudID, string usuario, string etapa, string cola) {
            return base.Channel.ReAsignarSolicitudEnOnBase(solicitudID, usuario, etapa, cola);
        }
        
        public System.Threading.Tasks.Task<string> ReAsignarSolicitudEnOnBaseAsync(string solicitudID, string usuario, string etapa, string cola) {
            return base.Channel.ReAsignarSolicitudEnOnBaseAsync(solicitudID, usuario, etapa, cola);
        }
        
        public System.Collections.Generic.List<NotifyAuthenticationHandler.AdmBalanceoILP.SolicitudDetail> GetSolicitudes() {
            return base.Channel.GetSolicitudes();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<NotifyAuthenticationHandler.AdmBalanceoILP.SolicitudDetail>> GetSolicitudesAsync() {
            return base.Channel.GetSolicitudesAsync();
        }
    }
}
